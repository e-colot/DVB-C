% constants and configuration of the project

function cfg = config()
    clc; close all;

    % setup the path
    project_root = fileparts(mfilename('fullpath')); % Get project root
    src_path = fullfile(project_root, 'src');
    if ~contains(path, src_path)
        addpath(genpath(src_path));
    end

    cfg = struct();

    cfg.mapping_params = struct();
    cfg.mapping_params.Nbps = 4;
    cfg.mapping_params.modulation = 'qam';

    cfg.OSF = 20;    % oversample factor

    cfg.RRC_params = struct();
    cfg.RRC_params.rolloff = 0.2;
    cfg.RRC_params.symbolRate = 5e6;
    cfg.RRC_params.bandwidth = cfg.RRC_params.symbolRate*(1+cfg.RRC_params.rolloff);
    cfg.RRC_params.taps = 4*cfg.OSF + 1;
    cfg.RRC_params.fs = cfg.OSF*cfg.RRC_params.symbolRate;

    %% Task 5.1 - Sync impact visualisation
    %cfg.desiredBits = 1e6; % Number of bits generated by the source
    %% Task 5.3 - gardner
    cfg.desiredBits = 1e4; % Number of bits generated by the source

    cfg.NumBits = ceil(cfg.desiredBits/cfg.mapping_params.Nbps)*cfg.mapping_params.Nbps; % Number of bits generated by the source

    cfg.N_0 = 1e-10; % Noise power spectral density
    cfg.BER_resolution = 20; % Number of points to calculate BER
    %% Task 5.1 - Sync impact visualisation
    %cfg.EbN0_interval = [5 16];
    %cfg.CFO_ratio_vec = linspace(1e-6, 33e-6, 3);
    %% Task 5.3 - gardner
    cfg.EbN0_interval = [4];
    cfg.CFO_ratio_vec = linspace(1e-6, 1000e-6, 3);

    % DO NOT TOUCH !!
    % used for every single BER curve
    cfg.BER_resolution = 80; % Number of points to calculate BER
    cfg.EbN0_interval = [-5 20];

    cfg.fc = 600e6;
    cfg.CFO_ratio = 15e-6;
    cfg.STO = 3; % Sampling time offset (in samples)
    cfg.STO_vec = [1,5,10,15,19]; % Sampling time offset (in samples)
    %cfg.STO_vec = [5]; % Sampling time offset (in samples)
    cfg.STO_vec = 1:5; % Sampling time offset (in samples)
    cfg.phase = unifrnd(0, 2*pi);
    cfg.phase_vec = linspace(0, 2*pi*4/5, 5); % Phase offset (in radians)

    cfg.pilot_length = 0;
    cfg.pilotK = 0;
    cfg.pilot = 0; % Pilot bits

    cfg.ToaA_params = struct();
    cfg.ToaA_params.measurements = 250; % Number of measurements to obtain the stddev

    cfg.k_coef_vec = [0.02 0.05];
    cfg.k_coef = 0.02;

    cfg.k_coef_vec = [0.02 0.05];
    cfg.k_coef = 0.02;


end
